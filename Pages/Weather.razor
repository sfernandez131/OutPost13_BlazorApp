@page "/weather"

@using Microsoft.AspNetCore.Mvc
@using OutPost13.Components
@using OutPost13.Data
@using System.Threading;
@using BlazorAnimate;
@using BlazorPro.BlazorSize;
@using System.Linq

@inject WeatherForecastService ForecastService
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider browserDateTimeProvider

<meta name="viewport" content="width=device-width, initial-scale=1" />

<style>
    /* iPhone 5/SE */
    @@media only screen and (max-width: 330px) {
        .hide{
          display:none;
        }
    }
    /* iPhone X */
    @@media screen and (min-width: 375px) and (max-width: 375px) {
        table {
            margin-left: -10px;
        }
    }
    td {
        vertical-align: middle !important;
        text-align: center !important;
    }
    th {
        text-align: center !important;
    }
    table {
        width: 100% !important;
    }

    button {
        border: none;
        background: none;
        text-transform: uppercase;
        height: 100%;
        font-weight: 700;
        color: black;
        letter-spacing: 1px;
        font-size: inherit;
        transition: all 0.3s;
        outline: none;
        border-left: 1px solid;
        border-right: 1px solid;
        background-color: white;
    }

    button:hover {
        color: white;
        background: grey;
    }

</style>

<h1>Weather Forecast</h1>
<h6>Weather data provided by the <a style="text-decoration: none;" href="https://www.ncdc.noaa.gov/cdo-web/webservices/v2" target="_blank">NOAA API</a>.</h6>
<h6>Air Quality data provided by the <a style="text-decoration: none;" href="https://openweathermap.org/api/air-pollution" target="_blank">OpenWeather API</a>.</h6>

<p>This component demonstrates fetching data from a service and processing to a frontend.</p>
<p>Enter your ZIP code to fetch weather data: </p>

<div style="display: table; border-spacing: 2px;">
    <EditForm Model=@Fuck OnSubmit=@GetWeatherForcast>
        <input style="border-radius: 25px; margin-right: 5px; outline: none; text-indent: 5px;" type="text" @bind-value="@ZIP" @bind-value:event="oninput" />
        <input id="goBtn" type="submit" value="Go" @onclick="@(() => { CheckLoaderState(); })"/>
    </EditForm>

    @if (Hourly)
    {
        <div class="w3-bar w3-black nospace">
            <button class="ghostBtn selected" @onclick="@(() => { GetTab(); })">Daily</button>        
            @*<NavLink href="radarr">
                <button id="swp" class="w3-bar-item w3-button">Radar</button>
            </NavLink>*@
            <NavLink href="radar">
                <button class="ghostBtn">Ext. Radar</button>
            </NavLink>
            <button class="ghostBtn selected" @onclick="@(() => {isAQI = isAQI == true ? false : true;})">AQI</button>
        </div>

        if (showLoader)
        {
            <Loader Show=@showLoader/>
    }
        if (forecasts != null && forecasts.Count == 0)
        {
            showLoader = true;
            <Loader Show=@showLoader/>
        }
        
        if (forecasts == null)
        {
            <p><em>Please Enter Your ZIP</em></p>
        }
        else if (forecasts.Count == 0)
        {
            GetWeatherForcast();
        }
        else if (forecasts.Any())
        {
            <Loader Show=@showLoader/>
            if (isAQI)
            {
                if (AirQaulityData != null)
                {
                    <p>1 = Good to 5 = Very Poor</p>
                    <table class="table-responsive center">
                        <thead>
                            <tr>
                                <th>Air Quality</th>
                                <th>CO</th>
                                <th>NO</th>
                                <th>NO2</th>
                                <th>O3</th>
                                <th>SO2</th>
                                @*<th>PM2_5</th>
                                <th>PM10</th>*@
                                <th>NH3</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var aqi in AirQaulityData.list)
                            {
                                <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                                    <td>@aqi.main.aqi</td>
                                    <td>@aqi.components.co</td>
                                    <td>@aqi.components.no</td>
                                    <td>@aqi.components.no2</td>
                                    <td>@aqi.components.o3</td>
                                    <td>@aqi.components.so2</td>
                                    @*<td>@aqi.components.pm2_5</td>
                                    <td>@aqi.components.pm10</td>*@
                                    <td>@aqi.components.nh3</td>
                                </tr>
                                s = s == 0 ? 1 : 0;
                            }
                        </tbody>
                    </table>
                }
            }
            //<Animate Animation="Animations.SlideLeft" Once="false" Duration="TimeSpan.FromSeconds(.5)" @ref="@anim" IsManual="false">
                <table class="table-responsive center">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th class="hide"></th>
                            <th>Summary</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in forecasts)
                        {
                            <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                                <td>@forecast.Date</td>
                                <td>@forecast.TemperatureC</td>
                                <td>@forecast.TemperatureF</td>
                                <td class="hide"><img src="@forecast.Icon" class="rounded-lg" style="max-height:80px; margin-right:5px"></td>
                                @*<td style="text-align:left !important;">@forecast.Summary</td>*@
                                <td>@forecast.Summary</td>
                            </tr>
                            s = s == 0 ? 1 : 0;
                        }
                    </tbody>
                </table>
            //</Animate>  
        }
    }
    @if (Daily)
    {
        <div class="w3-bar w3-black">
            <button class="ghostBtn" @onclick="@(() => { GetTab(); })">Hourly</button>
            @*<NavLink href="radarr">
                <button id="swp" class="w3-bar-item w3-button">Radar</button>
            </NavLink>*@
            <NavLink href="radar">
                <button class="ghostBtn">Ext. Radar</button>
            </NavLink>
            <button class="ghostBtn" @onclick="@(() => {isAQI = isAQI == true ? false : true;})">AQI</button>
        </div>

        if (showLoader)
        {
            <Loader Show=@showLoader/>
        }
        if (dForecasts != null && dForecasts.Count == 0)
        {
            showLoader = true;
            <Loader Show=@showLoader/>
        }

        if (dForecasts is null)
        {
            <p id="weatherPrompt"><em>Please Enter Your ZIP</em></p>
        }
        else if (dForecasts is null && !isProcessing)
        {
            <p id="weatherPrompt"><em>Please Enter Your ZIP</em></p>
        }
        else if (dForecasts == null && isProcessing)
        {
            <p id="weatherPrompt"><em>ZIP could not be found...</em></p>
        }
        else if (dForecasts.Count == 0)
        {
            GetWeatherForcast();
        }
        else
        {
            if (isAQI)
            {
                if (AirQaulityData != null)
                {
                    <p>1 = Good to 5 = Very Poor</p>
                    <table class="table-responsive center">
                        <thead>
                            <tr>
                                <th>Air Quality</th>
                                <th>CO</th>
                                <th>NO</th>
                                <th>NO2</th>
                                <th>O3</th>
                                <th>SO2</th>
                               @*<th>PM2_5</th>
                                <th>PM10</th>*@
                                <th>NH3</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var aqi in AirQaulityData.list)
                            {
                                <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                                    <td>@aqi.main.aqi</td>
                                    <td>@aqi.components.co</td>
                                    <td>@aqi.components.no</td>
                                    <td>@aqi.components.no2</td>
                                    <td>@aqi.components.o3</td>
                                    <td>@aqi.components.so2</td>
                                    @*<td>@aqi.components.pm2_5</td>
                                    <td>@aqi.components.pm10</td>*@
                                    <td>@aqi.components.nh3</td>
                                </tr>
                                s = s == 0 ? 1 : 0;
                            }
                        </tbody>
                    </table>
                }
            }
            //<Animate Animation="Animations.SlideUp" Once="false" Duration="TimeSpan.FromSeconds(.5)" @ref="@anim" IsManual="false">
                <table class="table-responsive center">
                    <thead>
                        <tr>
                            <th>Day Parts</th>
                            <th>Wind Speed</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th class="hide"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in dForecasts)
                        {
                            <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                                <td>@forecast.Name</td>
                                <td>@forecast.WindSpeed @forecast.WindDirection</td>
                                <td>@forecast.TemperatureC</td>
                                <td>@forecast.TemperatureF</td>
                                <td class="hide"><img src="@forecast.Icon" class="rounded-lg" style="max-height:80px; margin-right:5px"></td>
                            </tr>
                            <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                                <td colspan="5" style="font-weight:700">Summary: @forecast.Summary</td>
                            </tr>
                            s = s == 0 ? 1 : 0;
                        }
                    </tbody>
                </table>
            //</Animate>
        }
    }
</div>

@code {
    public bool showLoader = false;
    public TimeZoneInfo currentLocalTime = null;

    string Fuck = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // Remove the firstRender check if you want the current local time displayed to continuously update.
        {   // Leave the above firstRender check in place to ensure that the call to StateHasChanged() does not trigger an endless update loop.
            var browserDateTime = await browserDateTimeProvider.GetInstance();
            currentLocalTime = browserDateTime.LocalTimeZoneInfo;
            StateHasChanged();
        }
    }

    public void CheckLoaderState()
    {
        showLoader = showLoader ? false : true;
        StateHasChanged();
    }

    // Get Air Quality Index
    bool isAQI = true;
    AQI AirQaulityData;

    public void GetAirQual()
    {
        isAQI = true;
        if (string.IsNullOrEmpty(ZIP))
            return;

        string latLong = ForecastService.GetLatLong(ZIP);
        if (string.IsNullOrEmpty(latLong) || latLong.Equals(","))
            return;

        AirQaulityData = ForecastService.GetAQI(latLong.Split(',').FirstOrDefault(), latLong.Split(',').LastOrDefault());
    }

    // Get Hourly || Daily weather.
    bool Hourly = true;
    bool Daily = false;

    void GetTab()
    {
        isAQI = false;
        if (Daily)
        {
            Hourly = true;
            Daily = false;
        }
        else if (Hourly)
        {
            Hourly = false;
            Daily = true;
        }
    }
    //

    // Animation code.
    private Animate anim;

    private void RunAnimation()
    {
        anim.Run();
    }
    //

    // Color swapper for weather lines.
    // Style should be set as such: style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })"
    int s = 0;
    Dictionary<int, bool> bgColorTR = new Dictionary<int, bool>
    {
        { 0, true },
        { 1, false }
    };
    string GetBGColor(bool isSelected)
    {
        if (isSelected)
        {
            return "background-color:lightgray";
        }
        else
            return "background-color:white";
    }

    // Process weather data.
    private string ZIP;
    private List<WeatherForecast> forecasts;
    private List<DailyWeatherForecast> dForecasts;
    bool isProcessing = false;

    public void GetWeatherForcast()
    {
        if (string.IsNullOrEmpty(ZIP))
        {
            return;
        }
        GetAirQual();
        forecasts = ForecastService.GetHourlyForecast(ZIP, currentLocalTime);
        dForecasts = ForecastService.GetDailyForecast(ZIP, currentLocalTime);
        isProcessing = false;

        //Thread.Sleep(5000);
        showLoader = false;
        StateHasChanged();
    }
}

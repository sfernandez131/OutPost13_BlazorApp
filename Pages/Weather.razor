@page "/weather"

@using Microsoft.AspNetCore.Mvc
@using OutPost13.Data
@using System.Threading;
@using BlazorAnimate;

@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
<p>Enter your ZIP code to fetch weather data: </p>

<input type="text" @bind-value="@ZIP" @bind-value:event="oninput" @onkeypress="@Enter" />
<button @onclick="@GetWeatherForcast">Go</button>

@if (Hourly)
{
    <div class="w3-bar w3-black">
        <button id="swp" class="w3-bar-item w3-button" @onclick="@(() => { GetTab(); })">Switch to Daily</button>
    </div>
    if (forecasts == null && isProcessing)
    {
        <p><em>ZIP could not be found...</em></p>
    }
    else if (forecasts == null && !isProcessing)
    {
        <p><em>Please Enter Your ZIP</em></p>
    }
    else
    {
        <Animate Animation="Animations.SlideLeft" Once="false" Duration="TimeSpan.FromSeconds(.5)" @ref="@anim" IsManual="false">
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                            <td >@forecast.Date</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td><img src="@forecast.Icon" class="rounded-lg" style="max-height:80px; margin-right:5px">@forecast.Summary</td>
                        </tr>
                        s = s == 0 ? 1 : 0;
                    }
                </tbody>
            </table>
        </Animate>
    }
}
@if (Daily)
{
    <div class="w3-bar w3-black">
        <button id="swp" class="w3-bar-item w3-button" @onclick="@(() => { GetTab(); })">Switch to Hourly</button>
    </div>

    if (forecasts.Where(d => d.DailyWeather != null).Count() == 0 && isProcessing)
    {
        <p><em>ZIP could not be found...</em></p>
    }
    else if (forecasts.Where(d => d.DailyWeather != null).Count() == 0 && !isProcessing)
    {
        <p><em>Please Enter Your ZIP</em></p>
    }
    else
    {
        <Animate Animation="Animations.SlideRight" Once="false" Duration="TimeSpan.FromSeconds(.5)" @ref="@anim" IsManual="false">
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                            <td></td>
                            <td >@forecast.Date</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td><img src="@forecast.Icon" class="rounded-lg" style="max-height:80px; margin-right:5px">@forecast.Summary</td>
                        </tr>
                        s = s == 0 ? 1 : 0;
                    }
                </tbody>
            </table>
        </Animate>
    }
}

@code {
    bool Hourly = true;
    bool Daily = false;

    void GetTab()
    {
        if (Daily)
        {
            
            Hourly = true;
            Daily = false;
        }
        else if (Hourly)
        {
            Hourly = false;
            Daily = true;
        }
    }

    int s = 0;
    Dictionary<int, bool> bgColorTR = new Dictionary<int, bool>
    {
        { 0, true },
        { 1, false }
    };

    private Animate anim;

    private void RunAnimation()
    {
        anim.Run();
    }

    string GetBGColor(bool isSelected)
    {
        if (isSelected)
        {
            return "background-color:lightgray";
        }
        else
            return "background-color:white";
    }

    private string ZIP;
    private List<WeatherForecast> forecasts;

    bool isProcessing = false;

    public void GetWeatherForcast()
    {
        if (string.IsNullOrEmpty(ZIP))
        {
            return;
        }
        forecasts = ForecastService.GetForecast(ZIP);
        StateHasChanged();
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            isProcessing = true;
            StateHasChanged();
            GetWeatherForcast();
        }
    }
}

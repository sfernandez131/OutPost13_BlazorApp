@page "/weather"

@using Microsoft.AspNetCore.Mvc
@using OutPost13.Data
@using System.Threading;
@using BlazorAnimate;
@using BlazorPro.BlazorSize;

@inject WeatherForecastService ForecastService
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider browserDateTimeProvider

<meta name="viewport" content="width=device-width, initial-scale=1" />

<style>
    /* iPhone 5/SE */
    @@media only screen and (max-width: 330px) {
        .hide{
          display:none;
        }
    }
    /* iPhone X */
    @@media screen and (min-width: 375px) and (max-width: 375px) {
        table {
            margin-left: -10px;
        }
    }
    td {
        vertical-align: middle !important;
        text-align: center !important;
    }
    th {
        text-align: center !important;
    }
    table {
        width: 100% !important;
    }
</style>

<h1>Weather Forecast</h1>
<h6>Weather data provided by the <a style="text-decoration: none;" href="https://www.ncdc.noaa.gov/cdo-web/webservices/v2" target="_blank">NOAA API</a>.</h6>

<p>This component demonstrates fetching data from a service and processing to a frontend.</p>
<p>Enter your ZIP code to fetch weather data: </p>

<div style="display: table; border-spacing: 2px;">
    <input style="border-radius: 25px; margin-right: 5px; outline: none; text-indent: 5px;" type="text" @bind-value="@ZIP" @bind-value:event="oninput" @onkeypress="@Enter" />
    <button id="goBtn" @onclick="@(() => {GetWeatherForcast(currentLocalTime);})">Go</button>

    @if (Hourly)
    {
        <div class="w3-bar w3-black">
            <button id="swp" class="w3-bar-item w3-button" @onclick="@(() => { GetTab(); })">Switch to Daily</button>        
        <NavLink href="radarr">
            <button id="swp" class="w3-bar-item w3-button">Radar</button>
        </NavLink>
        <NavLink href="radar">
            <button id="swp" class="w3-bar-item w3-button">External Radar Page</button>
        </NavLink>
        </div>
        if (forecasts == null && isProcessing)
        {
            <p id="weatherPrompt"><em>ZIP could not be found...</em></p>
        }
        else if (forecasts == null && !isProcessing)
        {
            <p id="weatherPrompt"><em>Please Enter Your ZIP</em></p>
        }
        else if (forecasts.Count == 0)
        {
            GetWeatherForcast(currentLocalTime);
        }
        else
        {
            <Animate Animation="Animations.SlideLeft" Once="false" Duration="TimeSpan.FromSeconds(.5)" @ref="@anim" IsManual="false">
                <table class="table-responsive center">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th class="hide"></th>
                            <th>Summary</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in forecasts)
                        {
                            <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                                <td>@forecast.Date</td>
                                <td>@forecast.TemperatureC</td>
                                <td>@forecast.TemperatureF</td>
                                <td class="hide"><img src="@forecast.Icon" class="rounded-lg" style="max-height:80px; margin-right:5px"></td>
                                <td style="text-align:left !important;">@forecast.Summary</td>
                            </tr>
                            s = s == 0 ? 1 : 0;
                        }
                    </tbody>
                </table>
            </Animate>  
        }
    }
    @if (Daily)
    {
        <div class="w3-bar w3-black">
            <button id="swp" class="w3-bar-item w3-button" @onclick="@(() => { GetTab(); })">Switch to Hourly</button>
        <NavLink href="radarr">
            <button id="swp" class="w3-bar-item w3-button">Radar</button>
        </NavLink>
        <NavLink href="radar">
            <button id="swp" class="w3-bar-item w3-button">External Radar Page</button>
        </NavLink>
        </div>

        if (dForecasts is null && !isProcessing)
        {
            <p id="weatherPrompt"><em>Please Enter Your ZIP</em></p>
        }
        else if (dForecasts == null && isProcessing)
        {
            <p id="weatherPrompt"><em>ZIP could not be found...</em></p>
        }
        else if (dForecasts == null && !isProcessing)
        {
            <p id="weatherPrompt"><em>Please Enter Your ZIP</em></p>
        }
        else if (dForecasts.Count == 0)
        {
            GetWeatherForcast(currentLocalTime);
        }
        else
        {

            <Animate Animation="Animations.SlideUp" Once="false" Duration="TimeSpan.FromSeconds(.5)" @ref="@anim" IsManual="false">
                <table class="table-responsive center">
                    <thead>
                        <tr>
                            <th>Day Parts</th>
                            <th>Wind Speed</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th class="hide"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in dForecasts)
                        {
                            <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                                <td>@forecast.Name</td>
                                <td>@forecast.WindSpeed @forecast.WindDirection</td>
                                <td>@forecast.TemperatureC</td>
                                <td>@forecast.TemperatureF</td>
                                <td class="hide"><img src="@forecast.Icon" class="rounded-lg" style="max-height:80px; margin-right:5px"></td>
                            </tr>
                            <tr style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })">
                                <td colspan="5" style="font-weight:700">Summary: @forecast.Summary</td>
                            </tr>
                            s = s == 0 ? 1 : 0;
                        }
                    </tbody>
                </table>
            </Animate>
            
        }
    }
</div>

@code {
    public TimeZoneInfo currentLocalTime = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // Remove the firstRender check if you want the current local time displayed to continuously update.
        {   // Leave the above firstRender check in place to ensure that the call to StateHasChanged() does not trigger an endless update loop.
            var browserDateTime = await browserDateTimeProvider.GetInstance();
            currentLocalTime = browserDateTime.LocalTimeZoneInfo;
            StateHasChanged();
        }
    }

    // Get Hourly || Daily weather.
    bool Hourly = true;
    bool Daily = false;

    void GetTab()
    {
        if (Daily)
        {
            
            Hourly = true;
            Daily = false;
        }
        else if (Hourly)
        {
            Hourly = false;
            Daily = true;
        }
    }
    //

    // Animation code.
    private Animate anim;

    private void RunAnimation()
    {
        anim.Run();
    }
    //

    // Color swapper for weather lines.
    // Style should be set as such: style="@GetBGColor(bgColorTR[s])" @onload="@(() => { bgColorTR[s] = bgColorTR[s] == true ? false : true; })"
    int s = 0;
    Dictionary<int, bool> bgColorTR = new Dictionary<int, bool>
    {
        { 0, true },
        { 1, false }
    };
    string GetBGColor(bool isSelected)
    {
        if (isSelected)
        {
            return "background-color:lightgray";
        }
        else
            return "background-color:white";
    }
    //

    // Process weather data.
    private string ZIP;
    private List<WeatherForecast> forecasts;
    private List<DailyWeatherForecast> dForecasts;
    bool isProcessing = false;

    public void GetWeatherForcast(TimeZoneInfo curTZI)
    {
        if (string.IsNullOrEmpty(ZIP))
        {
            return;
        }
        forecasts = ForecastService.GetHourlyForecast(ZIP, curTZI);
        dForecasts = ForecastService.GetDailyForecast(ZIP, curTZI);
        StateHasChanged();
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            isProcessing = true;
            StateHasChanged();
            GetWeatherForcast(currentLocalTime);
        }
    }
}
